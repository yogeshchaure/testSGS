package com.sgs.model.entity;

import com.sgs.model.service.SGSAppModuleImpl;

import java.sql.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 07 09:23:00 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SgsTpaMasterImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        TpamId,
        TpaId,
        LeServiceProvider,
        LeServiceReceiver,
        PassThrough,
        PassThroughBu,
        EffectiveStartDate,
        EffectiveEndDate,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TPAMID = AttributesEnum.TpamId.index();
    public static final int TPAID = AttributesEnum.TpaId.index();
    public static final int LESERVICEPROVIDER = AttributesEnum.LeServiceProvider.index();
    public static final int LESERVICERECEIVER = AttributesEnum.LeServiceReceiver.index();
    public static final int PASSTHROUGH = AttributesEnum.PassThrough.index();
    public static final int PASSTHROUGHBU = AttributesEnum.PassThroughBu.index();
    public static final int EFFECTIVESTARTDATE = AttributesEnum.EffectiveStartDate.index();
    public static final int EFFECTIVEENDDATE = AttributesEnum.EffectiveEndDate.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    private static final ADFLogger LOG = ADFLogger.createADFLogger(SgsTpaMasterImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SgsTpaMasterImpl() {
    }

    /**
     * Gets the attribute value for TpamId, using the alias name TpamId.
     * @return the value of TpamId
     */
    public Integer getTpamId() {
        return (Integer) getAttributeInternal(TPAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TpamId.
     * @param value value to set the TpamId
     */
    public void setTpamId(Integer value) {
        setAttributeInternal(TPAMID, value);
    }

    /**
     * Gets the attribute value for TpaId, using the alias name TpaId.
     * @return the value of TpaId
     */
    public String getTpaId() {
        return (String) getAttributeInternal(TPAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TpaId.
     * @param value value to set the TpaId
     */
    public void setTpaId(String value) {
        setAttributeInternal(TPAID, value);
    }

    /**
     * Gets the attribute value for LeServiceProvider, using the alias name LeServiceProvider.
     * @return the value of LeServiceProvider
     */
    public String getLeServiceProvider() {
        return (String) getAttributeInternal(LESERVICEPROVIDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for LeServiceProvider.
     * @param value value to set the LeServiceProvider
     */
    public void setLeServiceProvider(String value) {
        setAttributeInternal(LESERVICEPROVIDER, value);
    }

    /**
     * Gets the attribute value for LeServiceReceiver, using the alias name LeServiceReceiver.
     * @return the value of LeServiceReceiver
     */
    public String getLeServiceReceiver() {
        return (String) getAttributeInternal(LESERVICERECEIVER);
    }

    /**
     * Sets <code>value</code> as the attribute value for LeServiceReceiver.
     * @param value value to set the LeServiceReceiver
     */
    public void setLeServiceReceiver(String value) {
        setAttributeInternal(LESERVICERECEIVER, value);
    }

    /**
     * Gets the attribute value for PassThrough, using the alias name PassThrough.
     * @return the value of PassThrough
     */
    public String getPassThrough() {
        return (String) getAttributeInternal(PASSTHROUGH);
    }

    /**
     * Sets <code>value</code> as the attribute value for PassThrough.
     * @param value value to set the PassThrough
     */
    public void setPassThrough(String value) {
        setAttributeInternal(PASSTHROUGH, value);
    }

    /**
     * Gets the attribute value for PassThroughBu, using the alias name PassThroughBu.
     * @return the value of PassThroughBu
     */
    public String getPassThroughBu() {
        return (String) getAttributeInternal(PASSTHROUGHBU);
    }

    /**
     * Sets <code>value</code> as the attribute value for PassThroughBu.
     * @param value value to set the PassThroughBu
     */
    public void setPassThroughBu(String value) {
        setAttributeInternal(PASSTHROUGHBU, value);
    }

    /**
     * Gets the attribute value for EffectiveStartDate, using the alias name EffectiveStartDate.
     * @return the value of EffectiveStartDate
     */
    public Date getEffectiveStartDate() {
        return (Date) getAttributeInternal(EFFECTIVESTARTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveStartDate.
     * @param value value to set the EffectiveStartDate
     */
    public void setEffectiveStartDate(Date value) {
        setAttributeInternal(EFFECTIVESTARTDATE, value);
    }

    /**
     * Gets the attribute value for EffectiveEndDate, using the alias name EffectiveEndDate.
     * @return the value of EffectiveEndDate
     */
    public Date getEffectiveEndDate() {
        return (Date) getAttributeInternal(EFFECTIVEENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveEndDate.
     * @param value value to set the EffectiveEndDate
     */
    public void setEffectiveEndDate(Date value) {
        setAttributeInternal(EFFECTIVEENDDATE, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Date getUpdatedDate() {
        return (Date) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedDate.
     * @param value value to set the UpdatedDate
     */
    public void setUpdatedDate(Date value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public String getUpdatedBy() {
        return (String) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @param tpamId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer tpamId) {
        return new Key(new Object[] { tpamId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.sgs.model.entity.SgsTpaMaster");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        try {
            SGSAppModuleImpl am = new SGSAppModuleImpl();
            setTpamId(am.getDBSequence("SGS_TPA_MASTER_SEQ"));
        } catch (Exception e) {
            LOG.severe(e);
        }
    }
}

